ADD(4,0,i0)
ADD(0,0,i1)
ADD(1,0,i2)
ADD(0,0,i3)
ADD(1,0,i5)
ADD(1,0,i4)
ADD(0,0,i5)
ADD(0,0,i6) q0
ADD(1,0,i7) a
ADD(2,0,i8) haut de pile = A
ADD(1,0,i9) taille mot ajout
ADD(1,0,i10) ajout a haut de pile
ADD(0,0,i11) q0

transitions 3
ADD(0,0,i12) q0
ADD(0,0,i13) b
ADD(2,0,i14) haut de pile = A
ADD(1,0,i15) taille mot ajout
ADD(2,0,i16) dépile
ADD(0,0,i17) q0

transitions 4
ADD(0,0,i18) q0
ADD(2,0,i19) epsilon
ADD(0,0,i20) haut de pile = fond de pile
ADD(0,0,i21) taille mot ajout
ADD(0,0,i22) fond de pile
ADD(1,0,i23) q1

chargment du mot dans la mémoire:
ADD(4,0,i24) #nbr lettres mots
ADD(1,0,i25) a
ADD(1,0,i26) a
ADD(0,0,i27) b
ADD(0,0,i28) b

déplacement du mot dans le registre de travaille:
ADD(i24,0,r0)
ADD(i25,0,r1)
ADD(i26,0,r2)
ADD(i27,0,r3)
ADD(i28,0,r4)




ADD(1,0,r5) compteur pour parcourir le mot
ADD(0,0,r6) initialisation q à l'etat initial
ADD(0,0,r7) compteur taille pile
ADD(0,0,r8) sommet de pile (pile vide)
ADD(0,0,r9) initialisation de la pile (pile vide)

JE(r0,0,mot reconnu) verif si mot vide
Boucle mot:
JL(r0,r5,1)
	
	JE(r@r5,i2,1) lettre a reconnu
	JE(r6,i1,1) etat q0 reconnu
	JE(r8,i3,cas transition 1) sommet pile = pile vide
	
	JE(r@r5,i7,1) lettre a reconnu
	JE(r6,i6,1) etat q0 reconnu
	JE(r8,i8,cas transition 2) sommet de pile A reconnu
	
	JE(r@r5,i13,1) lettre b reconnu
	JE(r6,i12,1) etat q0 reconnu
	JE(r8,i14,cas transition 3) sommet de pile = A
	
	JE(r@r5,i19,1) lettre epsilon reconnu
	JE(r6,i18,1) etat q0 reconnu
	JE(r8,i20,cas transition 4) sommet de pile = pile vide
	
	si aucune des transitions n'est reconnu alors
	ADD(1,0,O1) output 1 le mot n'est pas reconnu
	
	cas transition 1
	ADD(1,0,r7) ajout un element à la pile
	ADD(i4,1,r10) ajout élément A à la pile
	ADD(0,0,r8)	update sommet pile
	ADD(r10,0,r8) 
	ADD(i5,0,r6) update etat
	JUMP(boucle mot)
	
	Cas transition 2
	ADD(1,0,r7) ajout un element à la pile
	ADD(i10,1,r11) ajout element A à la pile
	ADD(0,0,r8)	update sommet pile
	ADD(r11,0,r8)
	ADD(i11,0,r6) update etat
	JUMP(boucle mot)
	
	Cas transition 3
	ADD(-1,0,r7) on retire un element à la pile



mot reconnu
ADD(0,0,O0) output 0 si mot reconnu

mot pas reconnu
ADD(1,0,O1) output 1 si mot pas reconnu

Pseudo code :
Charger l'Automate A dans la mémoire
Charger Mot w dans la mémoire
Initialiser l'indice i à 0 (pour parcourir le mot)
Initialiser l'état de l'automate q à l'état initial
Initialiser la pile P à vide

tant que i < Longueur de w faire
	Lit la lettre de w[i]
	Si (q, s, sommet de P) a une transition (q', s', motPile), alors
		mettre à jour la pile 
		mettre à jour q à q'
	Sinon
		Écrit 1 en sortie  // Le mot n'est pas reconnu
	fin si

	Incrémente i
fin tant que

Si q est un état final de A alors
	Écrit 0 en sortie  // Le mot est reconnu
Sinon
	Écrit 1 en sortie  // Le mot n'est pas reconnu
finsi